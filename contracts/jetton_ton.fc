#include "imports/stdlib.fc";

global slice admin_address;
global slice borrower_address;
global slice accepted_jetton_master_address;
const int op::jetton_internal_transfer = 0x178d4519;
const int op::payment_received = 0x42424242;
const int op::transfer_notification = 0x7362d09c;
const int op::jetton::transfer = 0x0f8a7ea5;
const int const::min_tons = 1000000000; ;; кол-во тон для депозита (1 ТОН)
const int amount = 1000000000; ;; кол-во токенов в 'лендинг' (1 токен)

slice helper::addr_none() asm "b{00} PUSHSLICE";

() load_data() impure {
    slice ds = get_data().begin_parse();
    borrower_address = ds~load_msg_addr();
    admin_address = ds~load_msg_addr();
}


() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(borrower_address)
            .store_slice(admin_address)
        .end_cell());
}


() admin_maintain(slice in_msg_body) impure inline_ref {
    int mode = in_msg_body~load_uint(8);
    send_raw_message(in_msg_body~load_ref(), mode);
}


() send_deposit_and_borrow(slice recipient, int amount, slice jetton_wallet_addres) impure {
    send_raw_message(begin_cell()
            .store_uint(0x18, 6) ;; bounce
            .store_slice(jetton_wallet_addres)
            .store_coins(100000000) ;; 0.1
            .store_uint(0, 107)
            .store_uint(op::jetton::transfer, 32)
            .store_uint(now(), 64)
            .store_coins(amount)
            .store_slice(recipient)
            .store_slice(helper::addr_none())
            .store_uint(0, 1)
            .store_coins(0)
            .store_uint(0, 1)
        .end_cell(), 1);
}

() send_jetton_transfer(slice recipient, int amount, slice jetton_wallet_address) impure {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6) ;; bounce
        .store_slice(jetton_wallet_address)
        .store_coins(100000000) ;; 0.1 TON for gas
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::jetton::transfer, 32)
        .store_uint(0, 64) ;; query_id, can be set to now() if needed
        .store_coins(amount)
        .store_slice(recipient)
        .store_slice(jetton_wallet_address) ;; response_destination
        .store_uint(0, 1) ;; custom_payload
        .store_coins(1000000) ;; forward_amount: 0.001 TON
        .store_uint(0, 1) ;; forward_payload
    .end_cell(), 1);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_int(32);

    
    if (op == 1) { ;; DEPOSIT AND BORROW LOGIC
        load_data();

        throw_unless(333, equal_slices(sender_address,borrower_address));
        throw_unless(222, msg_value == const::min_tons);

        slice jetton_wallet_addres = in_msg_body~load_msg_addr();

        send_deposit_and_borrow(sender_address, amount, jetton_wallet_addres);

        return();
    }

    if (op == 2) { ;; ADMIN WITHDRAW LOGIC ( may improve to liquidation logic )
        throw_unless(444, equal_slices(sender_address, admin_address));
        admin_maintain(in_msg_body);
        save_data();
        return();
    }

    if (op == op::transfer_notification) {
    load_data();

    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice jetton_wallet_addres = in_msg_body~load_msg_addr();
    slice user_address = in_msg_body~load_msg_addr();

    throw_unless(555, jetton_amount >= amount);

    ;; Calculate TON to send
    ;; int ton_to_send = muldiv(jetton_amount, ton_per_jetton, 1000000000);

    ;; Send TON to user
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce
        .store_slice(jetton_wallet_addres)
        .store_coins(const::min_tons + 10000000)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        ;;.store_uint(op::payment_received, 32)
        ;;.store_uint(amount, 64)
    .end_cell();
    
    send_raw_message(msg, 1); ;; mode 1 to pay transfer fees from contract balance
    
    ;; Update contract state if necessary
    ;; save_data();

    return();
    }
}


(slice, int, int) get_last_borrower() method_id {
    slice cs = get_data().begin_parse();
    slice last_borrower_address = cs~load_msg_addr();
    return (last_borrower_address, amount, const::min_tons);
}


int get_contract_balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}

